# Clojure CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-clojure/ for more details
#
version: 2.1
executors:
  main:
    docker:
      - image: circleci/clojure:openjdk-11-tools-deps
      - image: docker.elastic.co/elasticsearch/elasticsearch:7.11.1
        environment:
          discovery.type: single-node

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m

commands:
  restore_caches:
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "deps.edn" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - restore_cache:
          keys:
            - v1-yarn-deps-{{ checksum "yarn.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-yarn-deps-

  setup_ssh:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "9b:3c:90:2a:d7:c1:76:ed:23:c8:83:b6:8b:cc:e3:18"

  fetch_deps:
    steps:
      - run:
          name: Fetch clojure deps
          command: |
            cp .circleci/settings.xml ~/.m2
            clojure -R:dev -e "(println \"Fetched deps\")"

      - run:
          name: Fetch yarn dependencies
          command: yarn install

  save_caches:
    steps:
      - save_cache:
          paths:
            - ~/.m2
            - ~/repo/.cpcache
            - ~/.gitlibs
          key: v1-dependencies-{{ checksum "deps.edn" }}

      - save_cache:
          paths:
            - ~/repo/node_modules
          key: v1-yarn-deps-{{ checksum "yarn.lock" }}

jobs:
  run_tests:
    executor: main
    steps:
      - checkout
      - restore_caches
      - setup_ssh
      - fetch_deps
      - save_caches
      - run:
          name: Run tests
          command: clojure -M:ci:dev:test

  build_and_publish:
    executor: main
    steps:
      - checkout
      - restore_caches
      - setup_ssh
      - fetch_deps
      - run: source ./.circleci/set_environment.sh
      - run:
          name: Build omni package
          command: cd ~/repo && ./bin/package
      - run:
          name: Publish omni package
          command: cd ~/repo && ./bin/publish-package

workflows:
  version: 2.1
  test_build_publish:
    jobs:
      - run_tests
      - build_and_publish:
          filters:
            branches:
              only:
                - main
                - km/package_and_deploy
          requires:
            - run_tests
